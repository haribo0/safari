<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ja.safari.rental.mapper.RentalSqlMapper">
	<!-- 대여 반납 신청pk -->
	<select id="getRentalOrderReturnPk" resultType="int">
		SELECT rental_item_return_table_seq.nextval from dual
	</select>
	<!-- 대여 반납 amount 같이 올라갈 pk 가져오기  -->
	<select id="getRentalReturnKakaopayApprovePk" resultType="int">
		SELECT rental_rtn_kakaopay_apprv_seq.nextval FROM dual
	</select>

	<!-- 대여 주문 amount 같이 올라갈 pk 가져오기  -->
	<select id="getRentalOrderKakaopayApprovePk" resultType="int">
		SELECT rental_ord_kakaopay_apprv_seq.nextval FROM dual
	</select>

	<!-- 대여 주문 pk 가져오기  -->
	<select id="getRentalOrderPk" resultType="int">
		SELECT rental_order_table_seq.nextval FROM dual
	</select>

	<select id="createPk" resultType="int">
		select rental_review_table_seq.nextval from dual
	</select>

	<!-- id로 유저 찾기 -->
	<select id="selectUserById" resultType="com.ja.safari.dto.UserDto">
		select * from user_table where id = #{id}
	</select>
	

	<!-- 아이디 중복 확인 -->
	<select id="countUsersByBusinessUserId" resultType="int">
		SELECT COUNT(*) FROM rental_buisness_table WHERE business_userid = #{businessUserId}
	</select>
	

	<!-- 회원 가입  -->
	<insert id="registerBusiness">
		insert into rental_buisness_table values(
			rental_buisness_table_seq.nextval,
			#{business_userid},
			#{pw},
			#{reg_num},
			#{reg_img_link},
			#{business_owner},
			#{business_name},
			#{business_address},
			#{phone},
			SYSDATE,
			'N'
		)
	</insert>
	
	<!-- 로그인 -->
	<select id="selectBusinessUserByIdAndPw" resultType="com.ja.safari.dto.RentalBusinessDto">
		SELECT * 
		FROM rental_buisness_table 
		WHERE business_userid = #{business_userid} 
			AND pw = #{pw}
	</select>
	
	<!-- 렌탈 상품 하나 가져오기 -->
	<select id="selectRentalItem" resultType="com.ja.safari.dto.RentalItemDto">
		select * from rental_review_table a 
		join rental_order_table b
		on a.rental_id = b.id 
		join rental_item_table c
		on b.item_id = c.id where a.rental_id = #{rental_id}
	</select>
	
	<!-- 렌탈 카테고리 리스트 -->
	<select id="selectCategoryListAll" resultType="com.ja.safari.dto.RentalMainCategoryDto">
		SELECT *
		FROM rental_main_category_table
	</select>
	
	<!-- 렌탈 서브카테고리 리스트 -->
	<select id="selectSubCategoryList" resultType="com.ja.safari.dto.RentalSubCategoryDto">
		SELECT * 
		FROM rental_sub_category_table
		WHERE main_category_id = #{mainCategoryId}
	</select>
	
	<!-- 렌탈 상품 리스트 -->
	<select id="selectRentalItemListAll" resultType="com.ja.safari.dto.RentalItemDto">
		SELECT
		
		<choose>
			<when test="orderly == 'likes'">
				a.*, NVL(p1.likeCount,0) as LikeCount from rental_item_table a 
				left join (select item_id, count(*) likeCount from rental_item_like_table group by item_id)p1
				on p1.item_id=a.id order by LikeCount DESC
			</when>
			
			<when test="orderly == 'likes' and sub_category_id > 0">
				a.*, NVL(p1.likeCount,0) as LikeCount from rental_item_table a 
				left join (select item_id, count(*) likeCount from rental_item_like_table group by item_id)p1
				on p1.item_id=a.id WHERE a.sub_category_id = #{sub_category_id} order by LikeCount DESC
			</when>
			
			<when test="orderly != 'likes' and sub_category_id > 0">
				* FROM rental_item_table a
				WHERE sub_category_id = #{sub_category_id}
			</when>
			
			<when test="orderly != 'likes' and main_category_id > 0">
				* FROM rental_item_table a
				JOIN rental_sub_category_table b ON a.sub_category_id = b.id
				JOIN rental_main_category_table c ON b.main_category_id = c.id
				WHERE c.id = #{main_category_id}
			</when>
			<otherwise>
				* FROM rental_item_table
			</otherwise>
		</choose>

	</select>
	
	<!-- 판매자 dto 가져오기 -->
	<select id="selectRentalBuisnessById" resultType="com.ja.safari.dto.RentalBusinessDto">
		select * from rental_buisness_table where id = (select business_id from rental_item_table where id = #{itemId})
	</select>
	

	<!-- 상품 하나 가져오기 -->
	<select id="selectById" resultType="com.ja.safari.dto.RentalItemDto">
		SELECT * 
		FROM rental_item_table 
		WHERE id = #{id}
	</select>
	
	<!-- 메인카테고리 이름 가져오기 -->
	<select id="selectMainCatName" resultType="String">
		SELECT main_category_name 
		FROM rental_main_category_table 
		WHERE id = #{main_category_id}
	</select>
	
	
	<!-- 서브카테고리 가져오기 -->
	<select id="selectSubCatName" resultType="com.ja.safari.dto.RentalSubCategoryDto">
	SELECT *
	FROM rental_sub_category_table
	WHERE id = (SELECT sub_category_id FROM rental_item_table WHERE id = #{id})
	</select>
	
	<!-- 상품 상세 이미지 가져오기 -->
	<select id="selectItemImageByItemId" resultType="com.ja.safari.dto.RentalItemImgDto">
		SELECT * 
		FROM rental_item_img_table
		WHERE item_id = #{itemId}
	</select>
	
	<!-- 상품 좋아요 여부확인  -->
	<select id="countMyLike" resultType="int">
		SELECT COUNT(*) FROM rental_item_like_table
		WHERE item_id = #{item_id}
		AND user_id = #{user_id}
	</select>
	
	<!-- 상품 좋아요 지우기 -->
	<delete id="deleteLike">
		DELETE FROM rental_item_like_table
		WHERE item_id = #{item_id}
		AND user_id = #{user_id}
	</delete>
	
	<!-- 상품 좋아요 생성 -->
	<insert id="insertLike">
		INSERT INTO rental_item_like_table
		values (
			rental_item_like_table_seq.nextval,
			#{user_id},
			#{item_id},
			SYSDATE
		)
	</insert>
	
	<!-- 상품 좋아요 갯수  -->
	<select id="countLikeById" resultType="int">
		SELECT COUNT(*) FROM rental_item_like_table
		WHERE item_id = #{item_id}
	</select>
	
	<!-- 리뷰 별점 별 갯수  -->
	<select id="getRentalReviewCountByRating" resultType="com.ja.safari.dto.RentalReviewCountDto">
		SELECT
		    COUNT(*) AS total_review_count,
		    SUM(CASE WHEN rrt.rental_review_rating = 5 THEN 1 ELSE 0 END) AS review_count5,
		    SUM(CASE WHEN rrt.rental_review_rating = 4 THEN 1 ELSE 0 END) AS review_count4,
		    SUM(CASE WHEN rrt.rental_review_rating = 3 THEN 1 ELSE 0 END) AS review_count3,
		    SUM(CASE WHEN rrt.rental_review_rating = 2 THEN 1 ELSE 0 END) AS review_count2,
		    SUM(CASE WHEN rrt.rental_review_rating = 1 THEN 1 ELSE 0 END) AS review_count1
		FROM rental_review_table rrt
		JOIN RENTAL_ORDER_TABLE rot ON rrt.rental_id = rot.id
		WHERE rot.item_id = #{itemId}
		GROUP BY rrt.rental_id
	</select>
	
	<!-- 기간별 할인 리스트  -->
	<select id="selectPeriodDiscById" resultType="com.ja.safari.dto.RentalPeriodDiscDto">
		SELECT * FROM rental_period_disc_table
		WHERE item_id = #{id} order by id
	</select>
	
	
	<!-- 대여 찜 리스트  -->
	<select id="selectRentalItemLikeAll" resultType="com.ja.safari.dto.RentalItemLikeDto">
		SELECT * FROM rental_item_like_table WHERE user_id= #{id}
	</select>
	
	
	<!-- 대여 오더 신청 -->
	<insert id="insertRentalOrder">
	INSERT INTO rental_order_table values(
	    #{id},
	    #{user_id},
	    #{item_id},
	    #{start_date},
	    #{end_date},
	    #{address},
	    #{price},
	    #{original_price},
	    #{deposit},
	    SYSDATE,
	    'N',
	    #{name}
		)
	</insert>
	
	<!-- 대여 반납 신청 -->
	<insert id="insertRentalReturn">
	INSERT INTO rental_item_return_table values(
		#{id},
   		#{rental_order_id},
   		'N', <!-- 반납 수취 여부 -->
   		#{discount_revocation}, <!-- 기간 할인 취소 요금정산 -->
    	'N', <!-- 정산 완료 여부 -->
    	SYSDATE
		)
	</insert>
	
	<!-- 반납 아이템 가져오기  -->
	<select id="selectRentalItemRetrunById" resultType="com.ja.safari.dto.RentalItemReturnDto">
		SELECT * FROM rental_item_return_table WHERE rental_order_id = #{id}
	</select>
	
	<!-- 대여 리뷰 작성 -->
	<insert id="insertRentalReview">
	INSERT INTO rental_review_table values(
		#{id},
		#{user_id},
   		#{rental_id},
	   	#{rental_review_title},
	    #{rental_review_content},
	    #{rental_review_rating},
	    '0',
	    'test',
	    SYSDATE,
	    SYSDATE
		)
	</insert>
	
	<!-- 대여 리뷰이미지 작성 -->
	<insert id="insertRentalReviewImg">
	INSERT INTO rental_review_img_table values(
		rental_review_img_table_seq.nextval,
   		#{review_id},
    	#{rental_review_img}
		)
	</insert>
	
	<!-- 대여 리뷰 불러오기  -->
	<select id="selectRentalReviewAll" resultType="com.ja.safari.dto.RentalReviewDto">
		SELECT *
		FROM rental_review_table a inner join rental_order_table b
		on a.rental_id = b.id
		join rental_item_table c
		on c.id = b.item_id
		where b.item_id = #{id}
	</select>
	
	<!-- 대여 평균 리뷰점수 불러오기  -->
	<select id="selectRatingAvg" resultType="Double">
		SELECT TRUNC(AVG(rental_review_rating),1) FROM (
			SELECT a.*, rental_review_rating FROM rental_item_table a join rental_order_table b 
			on a.id = b.item_id
			join rental_review_table c
			on b.id = c.rental_id
			WHERE b.item_id = #{id}
			) d group by d.id
	</select>
	
	<!--대여 리뷰 갯수  -->
	<select id="selectReviewCount" resultType="Integer">
		SELECT COUNT(rental_review_rating) FROM (
			SELECT a.*, rental_review_rating FROM rental_item_table a join rental_order_table b 
			on a.id = b.item_id
			join rental_review_table c
			on b.id = c.rental_id
			WHERE b.item_id = #{id}
			)
	</select>
	
	<!-- 사용자 리뷰 1개 이상체크 -->
	<select id="selectIsOverCount" resultType="Integer">
		SELECT COUNT(*) FROM rental_review_table WHERE user_id = #{id} AND rental_id = #{orderId}
	</select>
	
	
	<!--대여 리뷰 이미지 불러오기  -->
	<select id="selectRentalReviewImgAll" resultType="com.ja.safari.dto.RentalReviewImgDto">
		SELECT * FROM rental_review_img_table WHERE review_id = #{id}
	</select>
	
	<!-- 대여 아이템 title 가져오기 -->
	<select id="selectItemTitleByItemId" resultType="String">
		SELECT title FROM rental_item_table WHERE id = #{itemId}
	</select>
	
	<!-- 대여 카카오 페이 준비 -->
	<insert id="insertRentalKakaoReady">
		INSERT INTO rental_order_kakaopay_table values(
			rental_order_kakaopay_seq.nextval,
			#{partner_user_id},
			#{cid},
			#{tid},
			#{amount},
			'',
			'',
			#{partner_order_id},
			#{item_name},
			#{next_redirect_pc_url},
			SYSDATE
		)
	</insert>
	
	<!-- 대여 카카오 페이 준비된 dto 가져오기 -->
	<select id="getRentalOrderKakaopay" resultType="com.ja.safari.dto.RentalOrderKakaopayReady">
		SELECT * FROM rental_order_kakaopay_table WHERE partner_order_id = #{id} AND CID = 'TCSUBSCRIP'
	</select>
	<!-- 대여 반납반납반납 카카오 페이 준비된 dto 가져오기 -->
	<select id="getRentalReturnKakaopay" resultType="com.ja.safari.dto.RentalOrderKakaopayReady">
		SELECT * FROM rental_order_kakaopay_table WHERE partner_order_id = #{id} AND CID = 'TC0ONETIME'
	</select>
	
	
	<!-- 대여 카카오 approve -->
	<insert id="insertRentalKakaoApprove">
		INSERT INTO rental_order_kakaopay_approve values(
			#{id},
			#{aid},
			#{tid},
			#{cid},
			#{sid},
			#{partner_order_id},
			#{partner_user_id},
			#{payment_method_type},
			#{item_name},
			#{quantity},
			#{created_at},
			#{approved_at}
		)
	</insert>
	
	<!-- 대여 카카오 amount  -->
	<insert id="insertRentalKakaoApproveAmount">
		INSERT INTO rental_order_kakaopay_amount values(
			#{id},
			#{total},
			#{tax_free},
			#{vat},
			#{point},
			#{discount},
			#{green_deposit}
		)
	</insert>
	
	<!-- 반납 카카오 approve  -->
	<insert id="insertReturnKakaoApprove">
		INSERT INTO rental_return_kakaopay_approve values(
			#{id},
			#{aid},
			#{tid},
			#{cid},
			#{partner_order_id},
			#{partner_user_id},
			#{payment_method_type},
			#{item_name},
			#{quantity},
			#{created_at},
			#{approved_at}
		)
	</insert>
	<!-- 반납 카카오 amount  -->
	<insert id="insertReturnKakaoApproveAmount">
		INSERT INTO rental_return_kakaopay_amount values(
			#{id},
			#{total},
			#{tax_free},
			#{vat},
			#{point},
			#{discount},
			#{green_deposit}
		)
	</insert>

	
	<!-- 대여 카카오 페이 구독취소를 위한 sid 가져오기 -->
	<select id="getSidbyId" resultType="String">
		SELECT sid FROM rental_order_kakaopay_approve WHERE partner_order_id = #{id}
	</select>
	
	<!-- 대여 카카오 정기결제 approve 없을때 값 가져오기 -->
	<select id="getFirstApproveAt" resultType="Date">
		select approve_at from rental_order_kakaopay_approve where sid = #{sid}
	</select>
	
		
	<!-- 대여 카카오 구독취소  -->
	<insert id="insertRentalOrderKakaoInactivation">
		INSERT INTO rental_order_kakaopay_inactv values(
			rental_ord_kakaopay_inactv_seq.nextval,
			#{cid},
			#{sid},
			#{status},
			#{created_at},
			#{last_approved_at},
			#{inactivated_at}
		)
	</insert>
	
	 <!-- 대여 프로세스 완료 되었는지 -->
	 <select id="selectIsCompletedById" resultType="String">
		select is_completed from RENTAL_ITEM_RETURN_TABLE where rental_order_id = #{id}
	</select>
	
	
	
	
	
	<!-- 
	<update id="updateCustomerInfo">
		update m_customer 
			set user_id = #{user_id},
			 user_pw = #{user_pw},
			 nickname = #{nickname},
			 gender = #{gender},
			 email = #{email},
			 birth = #{birth},
			 phone = #{phone}
			where id = #{id}
	</update>
	
	 resultType="com.ja.safari.dto.RentalBusinessDto"
 -->
	
	
	
	
</mapper>