<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ja.safari.rental.mapper.RentalBusinessSqlMapper">


	<!-- 아이디 중복 확인 -->
	<select id="countUsersByBusinessUserId" resultType="int">
		SELECT COUNT(*) FROM rental_buisness_table WHERE UPPER(business_userid) = UPPER(#{businessUserId})
	</select>
	
	<!-- 사업자 계정 dto 가져오기 -->
	<select id="getBusinessDtoById" resultType="com.ja.safari.dto.RentalBusinessDto">
		SELECT * FROM rental_buisness_table WHERE id = #{id}
	</select>
	
	

	<!-- 회원 가입  -->
	<insert id="registerBusiness">
		INSERT INTO rental_buisness_table VALUES(
			rental_buisness_table_seq.nextval,
			#{business_userid},
			#{pw},
			#{reg_num},
			#{reg_img_link},
			#{business_owner},
			#{business_name},
			#{business_address},
			#{phone},
			SYSDATE,
			'N'
		)
	</insert>

	<!-- 사업자 정보 수정  -->
	<update id="updateBusinessInfo">
		UPDATE rental_buisness_table
		SET 
			pw = #{pw},
			reg_num = #{reg_num},
			reg_img_link = #{reg_img_link},
			business_owner = #{business_owner},
			business_name = #{business_name},
			business_address = #{business_address},
			phone = #{phone},
			reg_date = SYSDATE
		WHERE id = #{id}
	</update>
	
	<!-- 로그인 -->
	<select id="selectBusinessUserByIdAndPw" resultType="com.ja.safari.dto.RentalBusinessDto">
		SELECT * 
		FROM rental_buisness_table 
		WHERE business_userid = #{business_userid} 
			AND pw = #{pw}
	</select>
	
	<!-- 상품 pk -->
	<select id="getRentalItemPk" resultType="int">
		SELECT rental_item_table_seq.nextval 
		FROM DUAL
	</select>

	<!-- 상품 등록  -->
	<insert id="registerRentalItem">
		INSERT INTO rental_item_table VALUES(
			#{id},
			#{business_id},
			#{sub_category_id},
			#{title},
			#{item_description},
			#{main_img_link},
			#{deposit},
			#{price},
			#{quantity},
			SYSDATE
		)
	</insert>
	
	<!-- 상품 삭제  -->
	<delete id="deleteRentalItem">
		DELETE from rental_item_table 
		WHERE
			id = #{id}
	</delete>
	
	<!-- 상품 업데이트  -->
	<delete id="updateRentalItem">
		UPDATE rental_item_table 
		SET
			sub_category_id = #{sub_category_id},
			title = #{title},
			item_description = #{item_description},
			main_img_link = #{main_img_link},
			deposit = #{deposit},
			price = #{price},
			quantity = #{quantity},
			reg_date = SYSDATE
		WHERE
			id = #{id}
	</delete>
		
	<!-- 상품 pk로 1개 가져오기 -->
	<select id="selectRentalItemDto" resultType="com.ja.safari.dto.RentalItemDto">
		SELECT * 
		FROM rental_item_table
		WHERE id = #{itemId}
		ORDER BY id DESC
	</select>
		
	<!-- 유저아이디로 상품리스트 가져오기 -->
	<select id="getProductListByUserId" resultType="com.ja.safari.dto.RentalItemDto">
		SELECT * 
		FROM rental_item_table
		WHERE business_id = #{businessId}
		ORDER BY id DESC
	</select>
	
	<!-- 상품 상세이미지 등록  -->
	<insert id="registerRentalItemImg">
		INSERT INTO rental_item_img_table VALUES(
			rental_item_img_table_seq.nextval,
			#{item_id},
			#{img_link}
		)
	</insert>
	
	<!-- 상품 상세이미지 삭제  -->
	<delete id="deleteRentalItemImg">
		DELETE from rental_item_img_table 
		WHERE
			item_id = #{itemId}
	</delete>
	
	
	<!-- 할인 가격 등록  -->
	<insert id="registerDiscountedPrice">
		INSERT INTO rental_period_disc_table VALUES(
			rental_period_disc_table_seq.nextval,
			#{item_id},
			#{discounted_price},
			#{rental_period}
		)
	</insert>
	
	<!-- 할인 가격 삭제  -->
	<delete id="deleteDiscountedPricesByItemId">
		DELETE from rental_period_disc_table 
		WHERE
			item_id = #{itemId}
	</delete>
	
	<!-- 메인 카테고리 리스트 가져오기 -->
	<select id="getRentalMainCategoryList" resultType="com.ja.safari.dto.RentalMainCategoryDto">
		SELECT * 
		FROM rental_main_category_table 
	</select>
	
	<!-- 서브 카테고리 리스트 가져오기 -->
	<select id="getRentalSubCategoryListByMainCategoryId" resultType="com.ja.safari.dto.RentalSubCategoryDto">
		SELECT * 
		FROM rental_sub_category_table
		WHERE main_category_id = #{main_category_id} 
	</select>
	
	<!-- 반품 리스트 최근 5개 가져오기 -->
	<select id="getRecentReturnListByUserId" resultType="com.ja.safari.dto.RentalItemReturnDto">
	
		<![CDATA[
			SELECT t2.* FROM (
				SELECT t1.*, rownum rn FROM (
					SELECT rirt.*
					FROM RENTAL_ITEM_RETURN_TABLE rirt, rental_item_table it, rental_order_table ot
					WHERE rirt.rental_order_id = ot.id
					AND it.id = ot.item_id 
					AND it.business_id = #{userId}
					ORDER BY ot.id DESC
				) t1
			) t2 
			WHERE t2.rn<=5
	  	]]>

	</select>
	
	<!-- 주문 리스트 최근 5개 가져오기 -->
	<select id="getRecentOrderListByUserId" resultType="com.ja.safari.dto.RentalOrderDto">
	
		<![CDATA[
			SELECT t2.* FROM (
				SELECT t1.*, rownum rn FROM (
					SELECT ot.*
					FROM rental_item_table it, rental_order_table ot
					WHERE it.id = ot.item_id 
					and it.business_id = #{userId}
					ORDER BY ot.id DESC
				) t1
			) t2 
			WHERE t2.rn<=5
	  	]]>

	</select>
	
	<!-- 주문 리스트 가져오기 -->
	<select id="getOrderListByUserId" resultType="com.ja.safari.dto.RentalOrderDto">
		SELECT ot.* 
		FROM rental_item_table it, rental_order_table ot
		WHERE it.id = ot.item_id 
		and it.business_id = #{userId}
		ORDER BY ot.id DESC
	</select>
	
	<!-- 상품별 주문 리스트 가져오기 -->
	<select id="getOrderListByUserIdAndProductId" resultType="com.ja.safari.dto.RentalOrderDto">
		SELECT ot.* 
		FROM rental_item_table it, rental_order_table ot
		WHERE it.id = ot.item_id 
		and it.business_id = #{userId}
		<if test="productId != null and productId != 0 ">
		and it.id = #{productId}
		</if>
		ORDER BY ot.id DESC
	</select>
	
	<!-- 배송 처리 주문 리스트 가져오기 -->
	<select id="getOrderListToBeShippedByUserId" resultType="com.ja.safari.dto.RentalOrderDto">
		SELECT ot.* 
		FROM rental_item_table it, rental_order_table ot
		WHERE it.id = ot.item_id 
		AND it.business_id = #{userId}
		AND UPPER(ot.is_shipped) IN ( 'N' )
		ORDER BY ot.id DESC
	</select>
	
	<!-- 배송 완료 주문 리스트 가져오기 -->
	<select id="getShippedOrderListByUserId" resultType="com.ja.safari.dto.RentalOrderDto">
		SELECT ot.* 
		FROM rental_item_table it, rental_order_table ot
		WHERE it.id = ot.item_id 
		AND it.business_id = #{userId}
		AND UPPER(ot.is_shipped) IN ('Y')
		ORDER BY ot.id DESC
	</select>
	
	<!-- 배송 주문 완료 처리 -->
	<update id="changeShippingStatus">
		UPDATE rental_order_table 
		SET
			is_shipped = 'Y'
		WHERE id = #{orderId}
	</update>
	
	
	<!-- 반품 수취확인 처리 -->
	<update id="changeReturnShippingStatus">
		UPDATE RENTAL_ITEM_RETURN_TABLE 
		SET
			is_item_returned = 'Y'
		WHERE id = #{returnId}
	</update>
	
	
	<!-- 전체 리뷰 리스트 가져오기 -->
	<select id="getAllReviews" resultType="com.ja.safari.dto.RentalReviewDto">
		SELECT
		    r.*
		FROM
		    rental_review_table r
		JOIN
		    rental_order_table o ON r.rental_id = o.id
		JOIN
		    rental_item_table i ON o.item_id = i.id
	</select>
	
	<!-- 답글 상태별 리뷰 리스트 가져오기 -->
	<select id="getReviewListByStatus" resultType="com.ja.safari.dto.RentalReviewDto">
		SELECT
		    r.*
		FROM
		    rental_review_table r
		JOIN
		    rental_order_table o ON r.rental_id = o.id
		JOIN
		    rental_item_table i ON o.item_id = i.id
		WHERE
		    1=1
		<if test="status != null and status = 'N' ">
	      AND r.rental_reply_review is NULL
	    </if>
		<if test="status != null and status='Y' ">
	      AND r.rental_reply_review is NOT NULL
	    </if>
	</select>
	
	
	<!-- 상품별 리뷰 리스트 가져오기 -->
	<select id="getReviewListByProductIdAndStatus" resultType="com.ja.safari.dto.RentalReviewDto">
		SELECT
		    r.*
		FROM
		    rental_review_table r
		JOIN
		    rental_order_table o ON r.rental_id = o.id
		JOIN
		    rental_item_table i ON o.item_id = i.id
		WHERE
		    1=1
		<if test="productId != null and productId != 0">
	      AND i.id = ${productId}
	    </if>
		<if test="status != null and status == 0 ">
	      AND r.rental_reply_review is NULL
	    </if>
		<if test="status != null and status == 1 ">
	      AND r.rental_reply_review is NOT NULL
	    </if>
	</select>
	
	
		
	<!-- 리뷰 답글 등록  -->
	<update id="saveReviewReply">
		UPDATE rental_review_table
		SET 
			rental_reply_review = #{rental_reply_review},
			rental_reply_reg_date = SYSDATE
		WHERE id = #{id}
	</update>
	
	
	<!-- 주문 id로 주문 가져오기 -->
	<select id="getOrderDtoById" resultType="com.ja.safari.dto.RentalOrderDto">
		SELECT * 
		FROM rental_order_table
		WHERE id = #{orderId}
	</select>
	
	<!-- 상품 가격 옵션 가져오기 -->
	<select id="getDiscountedPriceList" resultType="com.ja.safari.dto.RentalPeriodDiscDto">
		SELECT * 
		FROM rental_period_disc_table
		WHERE item_id = #{item_id}
		ORDER BY rental_period
	</select>
	
	<!-- 주문 취소 dto -->
	<select id="getOrderCancelByOrderId" resultType="com.ja.safari.dto.RentalCancelDto">
		SELECT *
		FROM rental_cancel_table
		WHERE rental_order_id = #{rental_order_id}
	</select>
	
	<!-- 주문 취소 완료 dto -->
	<select id="getOrderCancelBillByCancelId" resultType="com.ja.safari.dto.RentalCancelBillDto">
		SELECT *
		FROM rental_cancel_bill_table
		WHERE rental_cancel_id = #{rental_cancel_id}
	</select>
	
	<!-- 주문 반납 dto -->
	<select id="getItemReturnDtoByOrderId" resultType="com.ja.safari.dto.RentalItemReturnDto">
		SELECT *
		FROM rental_item_return_table
		WHERE rental_order_id = #{rental_order_id}
	</select>
	
	<!-- 반납 후 정산 dto -->
	<select id="getSurchargeBillDtoByReturnId" resultType="com.ja.safari.dto.RentalSurchargeBillDto">
		SELECT *
		FROM rental_surcharge_bill_table
		WHERE rental_return_id = #{rental_return_id}
	</select>
	
	<!-- 반납 신청 리스트 / 수취확인 전  -->
	<select id="getItemToBeReturnedListByBusinessId" resultType="com.ja.safari.dto.RentalItemReturnDto">
		SELECT * FROM RENTAL_ORDER_TABLE rot, RENTAL_ITEM_TABLE rit, RENTAL_ITEM_RETURN_TABLE rirt, RENTAL_BUISNESS_TABLE rbt 
		WHERE rot.ITEM_ID = rit.ID
		AND rirt.RENTAL_ORDER_ID = rot.ID 
		AND rit.BUSINESS_ID  = rbt.ID 
		AND 1=1
		AND rbt.id = #{businessId}
		AND RIRT.IS_ITEM_RETURNED = 'N'
		ORDER BY rirt.id desc
	</select>
	
	<!-- 반납 신청 리스트 / 수취확인 후  -->
	<select id="getItemReturnedListByBusinessId" resultType="com.ja.safari.dto.RentalItemReturnDto">
		SELECT * FROM RENTAL_ORDER_TABLE rot, RENTAL_ITEM_TABLE rit, RENTAL_ITEM_RETURN_TABLE rirt, RENTAL_BUISNESS_TABLE rbt 
		WHERE rot.ITEM_ID = rit.ID
		AND rirt.RENTAL_ORDER_ID = rot.ID 
		AND rit.BUSINESS_ID  = rbt.ID 
		AND 1=1
		AND rbt.id = #{businessId}
		AND RIRT.IS_ITEM_RETURNED = 'Y'
		ORDER BY rirt.id desc
	</select>
	
	<!-- 반납 번호로 상품 찾아오기   -->
	<select id="getProductDtoByReturnId" resultType="com.ja.safari.dto.RentalItemDto">
		SELECT rit.* FROM RENTAL_ORDER_TABLE rot, RENTAL_ITEM_TABLE rit, RENTAL_ITEM_RETURN_TABLE rirt 
		WHERE rot.ITEM_ID = rit.ID
		AND rirt.RENTAL_ORDER_ID = rot.ID 
		AND 1=1
		AND rirt.id = #{returnId}
	</select>
	
	<!-- 반납 번호로 주문 찾아오기   -->
	<select id="getOrderDtoByReturnId" resultType="com.ja.safari.dto.RentalOrderDto">
		SELECT rot.* 
		FROM RENTAL_ORDER_TABLE rot, RENTAL_ITEM_RETURN_TABLE rirt 
		WHERE rirt.RENTAL_ORDER_ID = rot.ID 
		AND rirt.id = #{returnId}
	</select>
	
	<!-- 광고 주문 pk 가져오기  -->
	<select id="getRentalAdsPk" resultType="int">
		SELECT rental_ads_table_seq.nextval FROM dual
	</select>
	
	<!-- 광고 주문 저장 -->
	<insert id="insertAdsOrder">
		INSERT INTO rental_ads_table VALUES (
			#{id},
			#{item_id},
			#{price},
			#{period},
			SYSDATE,
			<choose>
			  <when test="period == 'week'">
			    SYSDATE+7
			  </when>
			  <when test="period == 'month'">
			    ADD_MONTHS(SYSDATE,1)
			  </when>
			  <when test="period == 'year'">
			    ADD_MONTHS(SYSDATE,12)
			  </when>
			  <otherwise>
			    NULL
			  </otherwise>
			</choose>
		)
	</insert>
	
	<!-- 광고 주문 저장 -->
	<insert id="insertAdsPayment">
		INSERT INTO rental_kakao_payment_table VALUES (
			rental_kakao_payment_table_seq.nextval,
			#{partner_order_id},
			#{partner_user_id},
			#{cid},
			#{tid},
			#{amount},
			#{pg_token},
			#{payment_method_type}
		)
	</insert>
	
	<!-- 광고 주문 dto -->
	<select id="getAdsOrderById" resultType="com.ja.safari.dto.RentalAdsOrderDto">
		SELECT *
		FROM rental_ads_table
		WHERE id = #{orderId}
	</select>
	
	<!-- 광고 결제 dto -->
	<select id="getAdsPaymentByOrderId" resultType="com.ja.safari.dto.RentalKakaoPaymentDto">
		SELECT *
		FROM rental_kakao_payment_table
		WHERE partner_order_id = #{orderId}
	</select>
	
	<!-- 상품에 대한 광고 주문 count -->
	<select id="getAdsCountByProductId" resultType="int">
		
		<![CDATA[
			SELECT COUNT(*)
			FROM rental_ads_table
			WHERE item_id = #{productId}
			and end_date >= SYSDATE
	  	]]>

	</select>
	
	
	
	
	
	
	<!-- 대시 보드 -->
	
	<!-- 월별 판매량 -->
	<select id="getSalesByMonth" resultType="map">
	
		<![CDATA[
		    SELECT to_char(ot.reg_date, 'MM') AS MONTH, count(*) AS SALES
		    FROM rental_order_table ot, rental_item_table it
		    WHERE ot.item_id = it.id
		    AND it.BUSINESS_ID = #{businessId}
		    GROUP BY to_char(ot.reg_date, 'MM')
		    ORDER BY to_char(ot.reg_date, 'MM')
	  	]]>
	
	</select>
	
	<!-- 상품별 판매량 -->
	<select id="getSalesByProduct" resultType="map">
	
		<![CDATA[
			SELECT it.TITLE , count(*) AS SALES
			FROM rental_order_table ot, rental_item_table it
			WHERE ot.item_id = it.id 
			AND it.BUSINESS_ID = #{businessId}
			GROUP BY it.TITLE
	  	]]>
	
	</select>
	
	<!-- 상품별 월별 판매량 -->
	<select id="getSalesGroupByProductByMonth" resultType="map">
	
		<![CDATA[
		    SELECT to_char(ot.reg_date, 'MM') AS MONTH, count(*) AS SALES
		    FROM rental_order_table ot, rental_item_table it
		    WHERE ot.item_id = it.id
		    AND it.BUSINESS_ID = #{businessId}
		    GROUP BY to_char(ot.reg_date, 'MM')
		    ORDER BY to_char(ot.reg_date, 'MM')
	  	]]>
	
	</select>
	
	
	<!-- 성별 비율 -->
	<select id="getSalesByGender" resultType="map">

		SELECT ut.gender, count(*) as SALES FROM rental_order_table ot, user_table ut, RENTAL_ITEM_TABLE rit 
		WHERE ot.user_id = ut.id
		AND ot.ITEM_ID  = rit.ID 
		AND rit.BUSINESS_ID = #{businessId}
		GROUP BY ut.gender
		ORDER BY ut.gender

	</select>
	
	
	
	<!-- 월별 매출 -->
	<select id="getRevenueByDay" resultType="map">

		<![CDATA[
			SELECT to_char(ot.reg_date, 'MM') as MONTH, sum(ot.price) as REVENUE from rental_order_table ot, rental_item_table it
			WHERE ot.item_id = it.id
			AND it.BUSINESS_ID = #{businessId}
			GROUP BY to_char(ot.reg_date, 'MM')
			ORDER BY to_char(ot.reg_date, 'MM')
	  	]]>

	</select>
	
	
	
</mapper>