<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ja.safari.cs.mapper.CsSqlMapper">

	<!-- 로그인 -->
	<select id="getEmpDtoByUserNameAndPw" resultType="com.ja.safari.dto.CsEmpDto">
		SELECT * FROM cs_emp
		WHERE username = #{username}
		AND password = #{password}
	</select>

	<!-- 아이디로 직원 찾기 -->
	<select id="getEmpDtoById" resultType="com.ja.safari.dto.CsEmpDto">
		SELECT * FROM cs_emp
		WHERE id = #{id}
		ORDER BY id
	</select>


	<!-- 직원 등록 -->
	<insert id="registerEmployee" >
		INSERT INTO cs_emp VALUES(
			cs_emp_seq.nextval,
			0,
			'고객관리',
			'사원',
			#{name},
			#{nickname},
			#{username},
			#{password},
			SYSDATE
		)
	</insert>
	
	<!-- 직원 출근 -->
	<insert id="insertTimeInByEmpId" >
		INSERT INTO cs_attendance_log VALUES(
			cs_attendance_log_seq.nextval,
			#{empId},
			SYSDATE,
			NULL
		)
	</insert>
	
	<!-- 직원 퇴근 -->
	<insert id="updateTimeOutByLogId" >
		UPDATE cs_attendance_log 
		SET
			time_out = SYSDATE
		WHERE id = #{id}
	</insert>
	
	<!-- 직원 리스트 -->
	<select id="getEmployeeList" resultType="com.ja.safari.dto.CsEmpDto">
		SELECT * FROM cs_emp
		ORDER BY id
	</select>
	
	<!-- 직원 근무 상태 -->
	<select id="getRecentAttendanceLogDtos" resultType="com.ja.safari.dto.CsAttendanceLogDto">
		<!-- SELECT * FROM CS_ATTENDANCE_LOG 
		WHERE id = (SELECT max(id) FROM (
			SELECT * FROM cs_attendance_log
			WHERE emp_id = #{empId}
		)) -->
		SELECT * FROM (
			SELECT t1.*, rownum rm FROM 
			(SELECT *
			FROM cs_attendance_log
			WHERE emp_id = #{empId}
			ORDER BY time_in DESC) t1
		) t2
		WHERE t2.rm = 1
	</select>
	
	<!-- 기존 스케줄 지우기  -->
	<delete id="deleteScheduleByEmpId">
		DELETE FROM cs_schedule
		WHERE emp_id = #{empId}
	</delete>
	
	<!-- 새 스케줄 기록 -->
	<insert id="insertScheduleByEmpId">
		INSERT INTO cs_schedule VALUES(
			cs_schedule_seq.nextval,
			#{emp_id},
			#{weekday},
			#{start_time},
			#{end_time}
		)
	</insert>
	
	<!-- 스케줄 가져오기 -->
	<select id="getScheduleByEmpId" resultType="com.ja.safari.dto.CsScheduleDto">
		SELECT * FROM cs_schedule
		WHERE emp_id = #{empId}
	</select>
	
	<!-- 스케줄 가져오기 -->
	<select id="getScheduleList" resultType="com.ja.safari.dto.CsScheduleDto">
		SELECT * FROM cs_schedule
	</select>
	
	<!-- 출근한 직원 중 가장 일이 적은 직원 가져오기 -->
	<select id="getEmployeeWithLeastWorkload" resultType="com.ja.safari.dto.CsEmpDto">
		
		<![CDATA[
			SELECT t2.* FROM (
				SELECT t1.*, rownum rn FROM (
					SELECT e.*, COALESCE(lc.open_live_chats, 0) AS open_live_chats, COALESCE(q.unanswered_qnas, 0) AS unanswered_qnas
					FROM cs_emp e
					LEFT JOIN cs_attendance_log al ON e.id = al.emp_id
					LEFT JOIN (
					    SELECT emp_id, COUNT(*) AS unanswered_qnas
					    FROM cs_qna
					    WHERE qna_reply IS NULL
					    GROUP BY emp_id
					) q ON e.id = q.emp_id
					LEFT JOIN (
					    SELECT emp_id, COUNT(*) AS open_live_chats
					    FROM cs_live_chat
					    WHERE end_date IS NULL
					    GROUP BY emp_id
					) lc ON e.id = lc.emp_id
					WHERE al.time_out IS NULL
					    AND al.time_in IS NOT NULL
					    AND e.master < 1
					ORDER BY open_live_chats, unanswered_qnas, e.id
				) t1
			) t2
			WHERE t2.rn=1
		]]>
		
	</select>
	<!-- AND al.time_in > (SYSDATE-10) -->
	
	
	
	<!-- 1대1 문의 저장  -->
	<insert id="insertQnaPost">
		INSERT INTO cs_qna VALUES(
			cs_qna_seq.nextval,
			#{user_id},
			#{category_id},
			#{emp_id},
			#{qna_title},
			#{qna_content},
			SYSDATE,
			NULL,
			NULL
		)
	</insert>
	
	
	<!-- 문의 카테고리 가져오기 -->
	<select id="getCategoryById" resultType="com.ja.safari.dto.CsCategoryDto">
		SELECT * FROM cs_category
		WHERE id = #{id}
	</select>
	
	<!-- 회원 | 1대1문의 가져오기 -->
	<select id="getInquiryListByUserId" resultType="com.ja.safari.dto.CsQnaDto">
		SELECT * FROM cs_qna
		WHERE user_id = #{userId}
		ORDER BY id DESC
	</select>
	
	<!-- 직원 | 1대1문의 가져오기 -->
	<select id="getInquiryListByEmpId" resultType="com.ja.safari.dto.CsQnaDto">
		SELECT * FROM cs_qna
		WHERE emp_id = #{empId}
		ORDER BY id DESC
	</select>
	
	<!-- id로 | 1대1문의 가져오기 -->
	<select id="getQnaDtoById" resultType="com.ja.safari.dto.CsQnaDto">
		SELECT * FROM cs_qna
		WHERE id = #{id}
	</select>
	
	<!-- id로 | 1대1문의 답변 후기 개수 -->
	<select id="getQnaReplyRateCount" resultType="int">
		SELECT COUNT(*) FROM cs_qna_rating
		WHERE qna_id = #{id}
	</select>
	
	<!-- 직원 | 미처리 답변 개수 -->
	<select id="getUnansweredInquiryCount" resultType="int">
		SELECT COUNT(*) FROM cs_qna
		WHERE emp_id = #{empId}
		AND qna_reply IS NULL
	</select>
	
	<!-- 1대1문의 답변저장 -->
	<update id="saveQnaReply" >
		UPDATE cs_qna
		SET 
			qna_reply = #{qna_reply},
			reply_date = SYSDATE
		WHERE id = #{id}
	</update>
	
	<!-- 1대1문의 답변 후기  -->
	<insert id="insertQnaReplyRating" >
		INSERT INTO cs_qna_rating VALUES (
			cs_qna_rating_seq.nextval,
			#{qna_id},
			#{rating},
			<choose>
			  <when test="text_review != null and text_review!=''">
			    #{text_review}
			  </when>
			  <otherwise>
			    NULL
			  </otherwise>
			</choose>		
		)
	</insert>
	
	<!-- 직원 | 미처리 답변 개수 -->
	<select id="getLiveChatPk" resultType="int">
		SELECT cs_live_chat_seq.nextval FROM DUAL
	</select>
	
	<!-- 실시간 문의 시작(저장)  -->
	<insert id="insertLiveChat">
		INSERT INTO cs_live_chat VALUES(
			#{id},
			#{user_id},
			#{category_id},
			#{emp_id},
			SYSDATE,
			NULL
		)
	</insert>
	
	<!-- 실시간 문의 메세지 입력(저장) | 유저 -->
	<insert id="insertLiveChatMsg">
		INSERT INTO cs_live_chat_msg VALUES(
			cs_live_chat_msg_seq.nextval,
			#{chat_id},
			#{sender},
			#{msg},
			SYSDATE,
			0
		)
	</insert>
	
	<!-- 실시간 문의 메세지 입력(저장) | 직원   -->
	<insert id="insertLiveChatMsgByEmp">
		INSERT INTO cs_live_chat_msg VALUES(
			cs_live_chat_msg_seq.nextval,
			#{chat_id},
			#{sender},
			#{msg},
			SYSDATE,
			0
		)
	</insert>
		
	<!-- 실시간 문의 채팅방 리스트 직원 아이디로  가져오기 -->
	<select id="getLiveChatListByEmpId" resultType="com.ja.safari.dto.CsChatListDto">
		SELECT c.*, ut.id AS user_id, ut.NICKNAME, ct.category FROM cs_live_chat c
		JOIN USER_TABLE ut ON c.user_id = ut.ID 
		JOIN CS_CATEGORY ct ON c.category_id = ct.id
		WHERE c.emp_id = #{empId}
		ORDER BY c.id
	</select>
		
	<!-- 안 읽은 개수 가져오기 직원용 -->
	<select id="getUnreadMsgCountByChatId" resultType="int">
		SELECT COUNT(*) FROM  cs_live_chat_msg
		WHERE chat_id = #{chatId}
		AND is_read = 0
		AND sender = 1
	</select>
	
	<!-- 실시간 문의 채팅방 아이디로 메세지 가져오기 (최근) -->
	<select id="getLastMsgByChatId" resultType="com.ja.safari.dto.CsLiveChatMsgDto">
		SELECT * FROM (
			SELECT t1.*, rownum rn FROM (
				SELECT * FROM cs_live_chat_msg
				WHERE chat_id = #{chatId}
				ORDER BY id DESC
			)t1
		) t2 
		WHERE rn = 1
	</select>
	
	<!-- 실시간 문의 채팅방 아이디로 메세지 가져오기 -->
	<select id="getLiveChatMsgListByChatId" resultType="com.ja.safari.dto.CsLiveChatMsgDto">
		SELECT * FROM cs_live_chat_msg
		WHERE chat_id = #{chatId}
		ORDER BY id
	</select>
	
	<!-- 실시간 문의 채팅방 아이디로 메세지 가져오기 -->
	<select id="getMsgListByChatId" resultType="com.ja.safari.dto.CsLiveChatMsgDto">
		SELECT * FROM cs_live_chat_msg
		WHERE chat_id = #{chatId}
		ORDER BY id
	</select>
	
	<!-- 종료되지 않은 실시간 문의 카운트 -->
	<select id="getUnfinishedChatCountByEmpId" resultType="int">
		SELECT COUNT(*) FROM cs_live_chat
		WHERE emp_id = #{empId}
		AND end_date IS NULL
	</select>
	
	<!-- 실시간 문의 가져오기  -->
	<select id="getChatById" resultType="com.ja.safari.dto.CsLiveChatDto">
		SELECT * FROM cs_live_chat
		WHERE id = #{chatId}
	</select>
	
	<!-- 문의 메세지 읽음 처리 (직원이 읽었을 때 ) -->
	<update id="markMsgAsReadByEmp">
		UPDATE cs_live_chat_msg
		SET
			is_read = 1
		WHERE chat_id = #{chatId}
		AND sender = 1
	</update>
	
	<!-- 문의 메세지 읽음 처리 (유저가 읽었을 때) -->
	<update id="markMsgAsReadByUser">
		UPDATE cs_live_chat_msg
		SET
			is_read = 1
		WHERE chat_id = #{chatId}
		AND sender = 0
	</update>
	
	<!-- 실시간 문의 종료  -->
	<update id="endLiveChatById">
		UPDATE cs_live_chat
		SET
			end_date = SYSDATE
		WHERE id = #{chatId}
	</update>
	
	<!-- 실시간 문의 종료 여부 확인   -->
	<select id="isChatEnded" resultType="int">
		SELECT COUNT(*) AS chat_count
		FROM cs_live_chat
		WHERE id = #{chatId}
		  AND end_date IS NOT NULL
	</select>
	
	<!-- 실시간 문의 채팅 아이디로 유저 찾기  -->
	<select id="getUserDtoByChatId" resultType="com.ja.safari.dto.UserDto">
		SELECT ut.* FROM cs_live_chat c
		JOIN USER_TABLE ut ON c.user_id = ut.ID 
		WHERE c.id = #{chatId}
	</select>
	
	<!-- 실시간 문의 채팅 아이디로 직원 찾기  -->
	<select id="getEmpDtoByChatId" resultType="com.ja.safari.dto.CsEmpDto">
		SELECT e.* FROM CS_EMP e
		JOIN cs_live_chat c ON c.emp_id = e.id
		WHERE c.id = #{chatId}
	</select>
	
		
	<!-- 실시간 문의  후기  -->
	<insert id="saveLiveChatRating" >
		INSERT INTO cs_live_chat_rating VALUES (
			cs_live_chat_rating_seq.nextval,
			#{chat_id},
			#{rating},
			<choose>
			  <when test="text_review != null and text_review!=''">
			    #{text_review}
			  </when>
			  <otherwise>
			    NULL
			  </otherwise>
			</choose>		
		)
	</insert>
	
	
	<!-- 직원별 실시간 문의 별점 (별점순) -->
	<select id="getEmpChatRatingList" resultType="com.ja.safari.dto.CsEmpRatingResponseDto">
		SELECT e.id AS emp_id, e.name, ROUND(AVG(r.rating), 2)  AS avg_rating
		FROM cs_live_chat lc
		INNER JOIN cs_emp e ON e.id = lc.emp_id
		LEFT JOIN cs_live_chat_rating r ON r.chat_id = lc.id
		WHERE master = 0
		GROUP BY e.id, e.name
		ORDER BY avg_rating DESC
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- id로 | 1대1문의/유저/직원/카테고리 조인 후 가져오기 | ResultMap -->
	<resultMap id="combinedResultMap" type="com.ja.safari.dto.CsQnaCombinedDto">
	  <result property="id" column="qna_id"  />
	  <result property="qna_title" column="qna_title"  />
	  <result property="qna_content" column="qna_content"  />
	  <result property="reg_date" column="reg_date"  />
	  <result property="qna_reply" column="qna_reply" />
	  <result property="reply_date" column="reply_date"  />
	  <!-- UserDto -->
	  <association property="userDto" javaType="com.ja.safari.dto.UserDto">
	    <result property="id" column="user_id"  />
	    <result property="email" column="email"  />
	    <result property="pw" column="pw"  />
	    <result property="nickname" column="nickname"  />
	    <result property="phone" column="phone" />
	    <result property="gender" column="gender"  />
	    <result property="birth" column="birth"  />
	    <result property="profile_img_link" column="profile_img_link"  />
	    <result property="reg_date" column="user_reg_date"  />
	  </association>
	  <!--CsCategoryDto -->
	  <association property="categoryDto" javaType="com.ja.safari.dto.CsCategoryDto">
	    <result property="id" column="category_id" />
	    <result property="category" column="category"  />
	  </association>
	  <!-- CsEmpDto (empId만)-->
	  <association property="empDto" javaType="com.ja.safari.dto.CsEmpDto">
	    <result property="id" column="emp_id"  />
	    <result property="nickname" column="emp_nickname"  />
	  </association>
	</resultMap>
	
	<select id="getQnaCombinedDtoById" parameterType="java.lang.Integer"  resultMap="combinedResultMap">
		SELECT q.id AS qna_id, q.qna_title, q.qna_content, q.reg_date, q.qna_reply, q.reply_date,
		       u.id AS user_id, u.email, u.pw, u.nickname, u.phone, u.gender, u.birth, u.profile_img_link, u.reg_date AS user_reg_date,
		       c.id AS category_id, c.category,
		       e.id AS emp_id, e.nickname AS emp_nickname
		FROM CS_QNA q
		LEFT JOIN USER_TABLE u ON q.user_id = u.id
		LEFT JOIN cs_category c ON q.category_id = c.id
		LEFT JOIN cs_emp e ON q.emp_id = e.id
		WHERE q.id = #{id, jdbcType=INTEGER}
	</select>
	<!-- id로 | 1대1문의/유저/직원/카테고리 조인 후 가져오기 | ResultMap -->
	
	
	
	
	<!-- 실시간 문의 조인 후 가져오기 | ResultMap -->
	<resultMap id="csChatCombinedResultMap" type="com.ja.safari.dto.CsChatCombinedDto">
	  <id property="id" column="id"/>
	  <result property="reg_date" column="reg_date"/>
	  <result property="end_date" column="end_date"/>
		<!-- USER DTO -->
	  <association property="userDto" javaType="com.ja.safari.dto.UserDto">
	    <id property="id" column="user_id"/>
	    <result property="email" column="email"/>
	    <result property="pw" column="pw"/>
	    <result property="nickname" column="nickname"/>
	    <result property="phone" column="phone"/>
	    <result property="gender" column="gender"/>
	    <result property="birth" column="birth"/>
	    <result property="profile_img_link" column="profile_img_link"/>
	    <result property="reg_date" column="user_reg_date"/>
	  </association>
		<!-- CATEGORY DTO -->
	  <association property="categoryDto" javaType="com.ja.safari.dto.CsCategoryDto">
	    <id property="id" column="category_id"/>
	    <result property="category" column="category"/>
	  </association>
		<!-- EMP DTO -->
	  <association property="empDto" javaType="com.ja.safari.dto.CsEmpDto">
	    <id property="id" column="emp_id"/>
	    <result property="master" column="master"/>
	    <result property="department" column="department"/>
	    <result property="job_position" column="job_position"/>
	    <result property="name" column="emp_name"/>
	    <result property="nickname" column="emp_nickname"/>
	    <result property="username" column="username"/>
	    <result property="password" column="password"/>
	    <result property="reg_date" column="emp_reg_date"/>
	  </association>
	</resultMap>
	
	<select id="getLiveChatCombinedListByEmpId" parameterType="java.lang.Integer"  resultMap="combinedResultMap">
		SELECT
		    c.id, c.reg_date, c.end_date,
		    u.id AS user_id, u.email, u.pw, u.nickname, u.phone, u.gender, u.birth, u.profile_img_link, u.reg_date AS user_reg_date,
		    cat.id AS category_id, cat.category,
		    e.id AS emp_id, e.master, e.department, e.job_position, e.name AS emp_name, e.nickname AS emp_nickname,
		    e.username, e.password, e.reg_date AS emp_reg_date
		  FROM cs_live_chat c
		  JOIN user_table u ON c.user_id = u.id
		  JOIN cs_category cat ON c.category_id = cat.id
		  JOIN cs_emp e ON c.emp_id = e.id
		  
		  WHERE c.emp_id = #{empId}
		  AND c.end_date IS NULL
	</select>
	<!-- 실시간 문의 조인 후 가져오기 | ResultMap -->
	
	
	<!-- 직원용 -->
	<!-- 실시간 문의 ResponseDto | ResultMap -->
	<resultMap id="csChatResponseResultMap" type="com.ja.safari.dto.CsChatResponseDto">
	  <id property="id" column="id" />
	  <result property="user_id" column="user_id" />
	  <result property="emp_id" column="emp_id" />
	  <result property="nickname" column="nickname" />
	  <result property="category" column="category" />
	  <result property="reg_date" column="reg_date" />
	  <result property="end_date" column="end_date" />
	
	  <collection property="chatMsg" ofType="com.ja.safari.dto.CsLiveChatMsgDto">
	    <id property="id" column="msg_id" />
	    <result property="chat_id" column="chat_id" />
	    <result property="sender" column="sender" />
	    <result property="msg" column="msg" />
	    <result property="reg_date" column="msg_reg_date" />
	    <result property="is_read" column="is_read" />
	  </collection>
	</resultMap>
	
	<select id="getCsChatResponseDtoListByEmpId" resultMap="csChatResponseResultMap">
		SELECT
		  c.id, c.user_id, c.emp_id, c.reg_date, c.end_date,
		  u.nickname,
		  cat.category,
		  m.id AS msg_id, m.chat_id, m.sender, m.msg, m.reg_date AS msg_reg_date, m.is_read
		FROM cs_live_chat c
		JOIN user_table u ON c.user_id = u.id
		JOIN cs_category cat ON c.category_id = cat.id
		JOIN cs_live_chat_msg m ON c.id = m.chat_id
		WHERE c.emp_id = #{empId}
		AND c.end_date IS NULL
		ORDER BY c.id, m.id
	</select>
	<!-- 실시간 문의 조인 후 가져오기 | ResultMap -->
	<!-- 직원용 -->
	
	
	
	
	
	<!-- 직원용 -->
	<!-- 실시간 문의 ResponseDto | ResultMap -->
	<resultMap id="csChatResponseDtoResultMap" type="com.ja.safari.dto.CsChatResponseDto2">
	  <id property="id" column="id" />
	  <result property="user_id" column="user_id" />
	  <result property="emp_id" column="emp_id" />
	  <result property="nickname" column="nickname" />
	  <result property="category" column="category" />
	  <result property="reg_date" column="reg_date" />
	  <result property="end_date" column="end_date" />
	  <result property="unreadMsgCount" column="unread_msg_count" />
	
	  <collection property="chatMsg" ofType="com.ja.safari.dto.CsLiveChatMsgDto">
	    <id property="id" column="msg_id" />
	    <result property="chat_id" column="chat_id" />
	    <result property="sender" column="sender" />
	    <result property="msg" column="msg" />
	    <result property="reg_date" column="msg_reg_date" />
	    <result property="is_read" column="is_read" />
	  </collection>
	</resultMap>
	
	<select id="getCsChatResponseDtoList2ByEmpId" resultMap="csChatResponseDtoResultMap">
		SELECT
		    c.id, c.user_id, c.emp_id, c.reg_date, c.end_date,
		    u.nickname,
		    cat.category,
		    m.id AS msg_id, m.chat_id, m.sender, m.msg, m.reg_date AS msg_reg_date, m.is_read,
		    COALESCE(unread_msg_count, 0) as unread_msg_count
		FROM cs_live_chat c
		JOIN user_table u ON c.user_id = u.id
		JOIN cs_category cat ON c.category_id = cat.id
		JOIN cs_live_chat_msg m ON c.id = m.chat_id
		LEFT JOIN ( 
			SELECT chat_id, count(*) AS unread_msg_count
			FROM cs_live_chat_msg
			WHERE sender = 1 
			AND is_read = 0
			GROUP BY chat_id 
		) t1 ON c.id = t1.chat_id
		WHERE c.emp_id = #{empId}
		    AND c.end_date IS NULL
		ORDER BY c.id
	</select>
	<!-- 실시간 문의 조인 후 가져오기 | ResultMap -->
	<!-- 직원용 -->
	
	
	
	
	
	
	
</mapper>